// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -source=main.go -destination=mocks.go -package=main
//

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIUseCase is a mock of IUseCase interface.
type MockIUseCase[T any, R any] struct {
	ctrl     *gomock.Controller
	recorder *MockIUseCaseMockRecorder[T, R]
}

// MockIUseCaseMockRecorder is the mock recorder for MockIUseCase.
type MockIUseCaseMockRecorder[T any, R any] struct {
	mock *MockIUseCase[T, R]
}

// NewMockIUseCase creates a new mock instance.
func NewMockIUseCase[T any, R any](ctrl *gomock.Controller) *MockIUseCase[T, R] {
	mock := &MockIUseCase[T, R]{ctrl: ctrl}
	mock.recorder = &MockIUseCaseMockRecorder[T, R]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUseCase[T, R]) EXPECT() *MockIUseCaseMockRecorder[T, R] {
	return m.recorder
}

// Handle mocks base method.
func (m *MockIUseCase[T, R]) Handle(cmd Command[T]) (R, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", cmd)
	ret0, _ := ret[0].(R)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockIUseCaseMockRecorder[T, R]) Handle(cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockIUseCase[T, R])(nil).Handle), cmd)
}

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// FindUserById mocks base method.
func (m *MockIUserRepository) FindUserById(id string) (*UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserById", id)
	ret0, _ := ret[0].(*UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserById indicates an expected call of FindUserById.
func (mr *MockIUserRepositoryMockRecorder) FindUserById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserById", reflect.TypeOf((*MockIUserRepository)(nil).FindUserById), id)
}

// MockINotificationService is a mock of INotificationService interface.
type MockINotificationService struct {
	ctrl     *gomock.Controller
	recorder *MockINotificationServiceMockRecorder
}

// MockINotificationServiceMockRecorder is the mock recorder for MockINotificationService.
type MockINotificationServiceMockRecorder struct {
	mock *MockINotificationService
}

// NewMockINotificationService creates a new mock instance.
func NewMockINotificationService(ctrl *gomock.Controller) *MockINotificationService {
	mock := &MockINotificationService{ctrl: ctrl}
	mock.recorder = &MockINotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINotificationService) EXPECT() *MockINotificationServiceMockRecorder {
	return m.recorder
}

// NotifyUser mocks base method.
func (m *MockINotificationService) NotifyUser(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyUser", id)
}

// NotifyUser indicates an expected call of NotifyUser.
func (mr *MockINotificationServiceMockRecorder) NotifyUser(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyUser", reflect.TypeOf((*MockINotificationService)(nil).NotifyUser), id)
}
